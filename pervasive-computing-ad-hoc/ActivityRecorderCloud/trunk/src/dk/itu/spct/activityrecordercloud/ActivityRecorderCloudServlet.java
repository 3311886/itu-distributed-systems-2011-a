package dk.itu.spct.activityrecordercloud;

import java.io.IOException;
import java.util.Date;

import javax.servlet.http.*;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;


public class ActivityRecorderCloudServlet extends HttpServlet {
    
	
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
              throws IOException {
        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

        if (user != null) {
            resp.setContentType("text/plain");
            resp.getWriter().println("Hello, " + user.getNickname());
            resp.getWriter().println("Hello 2, " + user.getNickname());
            
            // 
//            resp.getWriter().println(userService.createLogoutURL("signout.html")); 
            // prints:  
            // /_ah/logout?continue=signout.html
            // not sure how it should be done
            // works with <domain>/logout?continue=signout.html
            // done in/with the guestbook.jsp
            
        } else {
            resp.sendRedirect(userService.createLoginURL(req.getRequestURI()));
        }
    }
}





//left over from the start up project
//@SuppressWarnings("serial")

//public class ActivityRecorderCloudServlet extends HttpServlet {
//	public void doGet(HttpServletRequest req, HttpServletResponse resp)
//			throws IOException {
//
//// left over from the start up project
////		resp.setContentType("text/plain");
////		resp.getWriter().println("Hello, world");
//		
//
//		// Based on the guest book tutorial::
//        // We have one entity group per Guestbook with all Greetings residing
//        // in the same entity group as the Guestbook to which they belong.
//        // This lets us run an ancestor query to retrieve all Greetings for a
//        // given Guestbook. However, the write rate to each Guestbook should be
//        // limited to ~1/second.
//		
//		
//		// previously: guestbookName
//        String activityName = req.getParameter("activityName");
//        
//        // previously: guestbookKey
//        Key activityKey = KeyFactory.createKey("Activity", activityName);
//        // previously: content
//        String activityType = req.getParameter("activityType");
//
//        
////        System.out.println("activityName from request: " + activityName);
////        System.out.println("activityType from request: " + activityType);
//        
//        
//        
////        String date = req.getParameter("date");
////        String xAxis = req.getParameter("xAxis");
////        String yAxis = req.getParameter("yAxis");
////        String zAxis = req.getParameter("zAxis");
//        // ? should probably be casted into some long / etc.. types ?
//        
//        
////        not sure yet
////        Date date = new Date();
//        
//        // Note:
//        // "The App Engine datastore is best understood as an object database.  
//        // An object in the datastore is known as an entity." 
//        // app engine book from oreily p. 104 xxx TODO set right reference.
//        // ...
//        // The API calls an entity ID given by the app a key name, and an entity 
//        // ID generated by the datastore an ID. An entity has either a key name or an ID, but not both.
//        
//        Entity activityNode = new Entity("ActivityNode", activityKey);
//        //greeting.setProperty("user", user);
////        activityNode.setProperty("date", date);
//        activityNode.setProperty("activityType", activityType);
//
//        
//        
//        //xAxis
//        
//        
//        DatastoreService datastore =
//                DatastoreServiceFactory.getDatastoreService();
//        datastore.put(activityNode);
//		
//        resp.sendRedirect("/activityrecording.jsp?activityName="
//                + activityName);
//        
//        
//		
//	}
//}
